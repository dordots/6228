rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() &&
        request.auth.uid == userId;
    }

    // Get user data from Firestore users collection
    // NOTE: Simplified to use custom claims only (no Firestore fallback)
    // Custom claims are set by syncUserOnSignIn and contain all necessary data
    function getUserData() {
      return null; // Custom claims are the source of truth
    }

    // Check if user document exists in Firestore
    // NOTE: Simplified to use custom claims only (no Firestore fallback)
    function hasUserDocument() {
      return false; // Not needed - using custom claims only
    }

    // Check if user is admin (uses custom claims only)
    function isAdmin() {
      return isAuthenticated() && request.auth.token.role == 'admin';
    }

    // Check if user has a specific permission (uses custom claims only)
    function hasPermission(permission) {
      return isAuthenticated() && (
        isAdmin() ||
        request.auth.token.permissions[permission] == true
      );
    }

    // Get user scope (uses custom claims only)
    function getUserScope() {
      return request.auth.token.scope != null
        ? request.auth.token.scope
        : 'self'; // Default to 'self' if not set
    }

    // Get user division (uses custom claims only)
    function getUserDivision() {
      return request.auth.token.division;
    }

    // Get user team (uses custom claims only)
    function getUserTeam() {
      return request.auth.token.team;
    }

    // Check if user is linked to a specific soldier (by soldier's id field matching user UID)
    function isUserLinkedToResource(resourceData) {
      return isAuthenticated() && (
        // Check if resource's soldier has id field matching user UID
        ('id' in resourceData && resourceData.id == request.auth.uid) ||
        // Check if equipment is assigned to a soldier whose id matches user UID
        ('assigned_to' in resourceData && resourceData.assigned_to == request.auth.uid) ||
        // Backward compatibility: check linked_soldier_id
        ('soldier_id' in resourceData && request.auth.token.linked_soldier_id == resourceData.soldier_id) ||
        ('assigned_to' in resourceData && request.auth.token.linked_soldier_id == resourceData.assigned_to)
      );
    }

    // Scope-based access control
    function canAccessByScope(resourceData) {
      return isAuthenticated() && (
        isAdmin() ||
        (getUserScope() == 'global') ||
        (getUserScope() == 'division' && (
          getUserDivision() == resourceData.division_name ||
          getUserDivision() == resourceData.division)) ||
        (getUserScope() == 'team' && (
          // If resource has team_name field, check it matches user's team
          (('team_name' in resourceData) &&
           getUserDivision() == resourceData.division_name &&
           getUserTeam() == resourceData.team_name) ||
          (('team' in resourceData) &&
           getUserDivision() == resourceData.division &&
           getUserTeam() == resourceData.team) ||
          // If resource doesn't have team_name, allow division-level access for team leaders
          // (they'll filter client-side by assigned_to)
          (!('team_name' in resourceData) && !('team' in resourceData) &&
           getUserDivision() == resourceData.division_name))) ||
        (getUserScope() == 'self' && (
          isUserLinkedToResource(resourceData) ||
          isOwner(resourceData.created_by)))
      );
    }
    
    // System collection - for admin setup
    match /system/{document} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || 
        (document == 'admin_setup' && !exists(/databases/$(database)/documents/system/admin_setup));
    }
    
    // Soldiers collection
    match /soldiers/{soldierID} {
      allow read: if hasPermission('personnel.view') && canAccessByScope(resource.data);
      allow create: if hasPermission('personnel.create');
      allow update: if hasPermission('personnel.update') && canAccessByScope(resource.data);
      allow delete: if hasPermission('personnel.delete') && canAccessByScope(resource.data);
    }
    
    // Equipment collection
    match /equipment/{equipmentID} {
      allow read: if hasPermission('equipment.view') && canAccessByScope(resource.data);
      allow create: if hasPermission('equipment.create');
      allow update: if hasPermission('equipment.update') && canAccessByScope(resource.data);
      allow delete: if hasPermission('equipment.delete') && canAccessByScope(resource.data);
    }
    
    // Weapons collection
    match /weapons/{weaponID} {
      allow read: if hasPermission('equipment.view') && canAccessByScope(resource.data);
      allow create: if hasPermission('equipment.create');
      allow update: if hasPermission('equipment.update') && canAccessByScope(resource.data);
      allow delete: if hasPermission('equipment.delete') && canAccessByScope(resource.data);
    }
    
    // Serialized gear collection
    match /serialized_gear/{gearID} {
      allow read: if hasPermission('equipment.view') && canAccessByScope(resource.data);
      allow create: if hasPermission('equipment.create');
      allow update: if hasPermission('equipment.update') && canAccessByScope(resource.data);
      allow delete: if hasPermission('equipment.delete') && canAccessByScope(resource.data);
    }
    
    // Drone sets collection
    match /drone_sets/{droneSetID} {
      allow read: if hasPermission('equipment.view') && canAccessByScope(resource.data);
      allow create: if hasPermission('equipment.create');
      allow update: if hasPermission('equipment.update') && canAccessByScope(resource.data);
      allow delete: if hasPermission('equipment.delete') && canAccessByScope(resource.data);
    }
    
    // Drone components collection
    // Note: Components are shared resources, not tied to divisions
    match /drone_components/{componentID} {
      allow read: if hasPermission('equipment.view');
      allow create: if hasPermission('equipment.create');
      allow update: if hasPermission('equipment.update');
      allow delete: if hasPermission('equipment.delete');
    }

    // Drone set types collection - configuration data
    match /drone_set_types/{typeID} {
      allow read: if hasPermission('equipment.view');
      allow create: if hasPermission('equipment.create');
      allow update: if hasPermission('equipment.update');
      allow delete: if hasPermission('equipment.delete');
    }

    // Activity logs - read with permission, write for authenticated
    match /activity_logs/{logID} {
      allow read: if hasPermission('system.history') && canAccessByScope(resource.data);
      allow create: if isAuthenticated();
      allow update: if false; // Never update logs
      allow delete: if isAdmin();
    }
    
    // Daily verifications
    match /daily_verifications/{verificationID} {
      allow read: if hasPermission('operations.verify') && canAccessByScope(resource.data);
      allow create: if hasPermission('operations.verify');
      allow update: if false; // Immutable once created
      allow delete: if isAdmin();
    }
    
    // Users collection - for profile management
    match /users/{userId} {
      allow read: if isAuthenticated() && 
        (isOwner(userId) || hasPermission('system.users'));
      allow create: if isOwner(userId) || hasPermission('system.users');
      allow update: if isOwner(userId) || hasPermission('system.users');
      allow delete: if hasPermission('system.users');
    }
    
    // Uploads collection - for file storage references
    match /uploads/{uploadId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.uploaded_by);
      allow delete: if isAdmin();
    }
  }
}